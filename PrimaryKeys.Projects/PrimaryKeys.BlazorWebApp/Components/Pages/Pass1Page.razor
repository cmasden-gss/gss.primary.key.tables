@page "/schema-manager"
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.IO
@using System.Linq
@using DevExpress.Blazor
@inject IHttpContextAccessor HttpContextAccessor
@inject IWebHostEnvironment Env

<div class="container my-4">
    <h1 class="mb-4">Schema Manager</h1>

    <!-- Tables Grid Section -->
    <div class="mb-4">
        <h2>Tables</h2>
        <DxGrid Data="@Tables" @ref="TablesGrid"
                EditingMode="GridEditMode.EditForm"
                ShowFilterRow="true"
                CustomizeEditModel="OnTableCustomizeEditModel"
                EditModelSaving="OnTableEditModelSaving"
                DataItemDeleting="OnTableDataItemDeleting"
                ColumnAutoWidth="true">
            <Columns>
                <DxGridCommandColumn Width="120px" />
                <DxGridDataColumn Field="@nameof(TableSchema.Name)" Caption="Table Name" />
            </Columns>
            <EditFormTemplate Context="EditFormContext">
                @{
                    var table = (TableSchema)EditFormContext.EditModel;
                }
                <DxFormLayout>
                    <DxFormLayoutItem Caption="Table Name:">
                        @EditFormContext.GetEditor("Name")
                    </DxFormLayoutItem>
                </DxFormLayout>
            </EditFormTemplate>
@*             <Templates>
                <RowTemplate Context="rowData">
                    <tr class="@(rowData.Equals(SelectedTable) ? "table-primary" : "")"
                        @onclick="(() => OnTableRowClick(rowData))">
                        @foreach (var col in TablesGrid.GetColumns())
                        {
                            <td>@col.GetDisplayText(rowData)</td>
                        }
                    </tr>
                </RowTemplate>
            </Templates> *@
        </DxGrid>
    </div>

    <!-- Columns Grid Section (Visible if a table is selected) -->
    @if (SelectedTable != null)
    {
        <div class="mb-4">
            <h2>Columns for '@SelectedTable.Name'</h2>
            <DxGrid Data="@SelectedTable.ColumnSchemas" @ref="ColumnsGrid"
                    EditingMode="GridEditMode.EditForm"
                    ShowFilterRow="true"
                    CustomizeEditModel="OnColumnCustomizeEditModel"
                    EditModelSaving="OnColumnEditModelSaving"
                    DataItemDeleting="OnColumnDataItemDeleting"
                    ColumnAutoWidth="true">
                <Columns>
                    <DxGridCommandColumn Width="120px" />
                    <DxGridDataColumn Field="@nameof(EditableColumnSchema.Name)" Caption="Column Name" />
                    <DxGridDataColumn Field="@nameof(EditableColumnSchema.Ordinal)" Caption="Ordinal" />
                    <DxGridDataColumn Field="@nameof(EditableColumnSchema.Size)" Caption="Size" />
                    <DxGridDataColumn Field="@nameof(EditableColumnSchema.AllowNull)" Caption="Allow Null" />
                    <DxGridDataColumn Field="@nameof(EditableColumnSchema.KeyType)" Caption="Key Type" />
                    <DxGridDataColumn Field="@nameof(EditableColumnSchema.ForeignKeyTable)" Caption="Foreign Table" />
                    <DxGridDataColumn Field="@nameof(EditableColumnSchema.ForeignKeyField)" Caption="Foreign Field" />
                    <DxGridDataColumn Field="@nameof(EditableColumnSchema.LastUpdatedBy)" Caption="Last Updated By" />
                    <DxGridDataColumn Field="@nameof(EditableColumnSchema.LastUpdatedOn)" Caption="Last Updated On" DisplayFormat="g" />
@* 
                    <DxGridDataColumn FieldName="Audit" Caption="Audit">

                        <CellDisplayTemplate>
                            @((MarkupString)@col.GetCellDisplayTemplateWithValue(@context.DataItem))
                            <button class="btn btn-link" @onclick="@(() => ShowAuditPopup(context.DataItem))">View Audit</button>
                        </CellDisplayTemplate>
                    </DxGridDataColumn> *@

@*                     <DxGridTemplateColumn Caption="Audit" Width="120px">
                        <DisplayTemplate Context="colData">
                            <button class="btn btn-link" @onclick="@(() => ShowAuditPopup(@context.DataItem))">View Audit</button>
                        </DisplayTemplate>
                    </DxGridTemplateColumn> *@
                </Columns>
                <EditFormTemplate Context="EditFormContext">
                    @{
                        var col = (EditableColumnSchema)EditFormContext.EditModel;
                    }
                    <DxFormLayout>
                        <DxFormLayoutItem Caption="Column Name:">
                            @EditFormContext.GetEditor("Name")
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Ordinal:">
                            @EditFormContext.GetEditor("Ordinal")
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Size:">
                            @EditFormContext.GetEditor("Size")
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Allow Null:">
                            @EditFormContext.GetEditor("AllowNull")
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Key Type:">
                            @EditFormContext.GetEditor("KeyType")
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Foreign Table:" Visible="@(col.KeyType == KeyType.Foreign)">
                            @EditFormContext.GetEditor("ForeignKeyTable")
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Foreign Field:" Visible="@(col.KeyType == KeyType.Foreign)">
                            @EditFormContext.GetEditor("ForeignKeyField")
                        </DxFormLayoutItem>
                    </DxFormLayout>
                </EditFormTemplate>
            </DxGrid>
        </div>
    }

    <!-- Audit Popup -->
    <DxPopup Visible="@AuditPopupVisible" Width="600px" ShowCloseButton="true" CloseOnOutsideClick="true"
             >
        <HeaderText>Audit History for '@(SelectedAuditColumn?.Name)'</HeaderText>
        <div class="p-3">
            @if (SelectedAuditColumn != null && SelectedAuditColumn.AuditHistory.Any())
            {
                <ul>
                    @foreach (var audit in SelectedAuditColumn.AuditHistory.OrderByDescending(a => a.ChangedOn))
                    {
                        <li>@audit.ChangedOn:g – <strong>@audit.ChangedBy</strong>: @audit.ChangeDescription 
                            (from @audit.PreviousValue to @audit.NewValue)
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No audit history available.</p>
            }
        </div>
    </DxPopup>

    <div class="mt-3">
        <button class="btn btn-primary" @onclick="SaveAllChanges">Save All Changes</button>
    </div>
</div>

@code {
    IGrid TablesGrid;
    IGrid ColumnsGrid;

    TableSchema SelectedTable;
    EditableColumnSchema SelectedAuditColumn;
    bool AuditPopupVisible = false;

    // --- Domain Models ---
    public enum KeyType
    {
        None,
        Master,
        Primary,
        Foreign
    }

    public class AuditEntry
    {
        public string TableName { get; set; }
        public string ColumnName { get; set; }
        public string ChangedBy { get; set; }
        public DateTime ChangedOn { get; set; }
        public string PreviousValue { get; set; }
        public string NewValue { get; set; }
        public string ChangeDescription { get; set; }
    }

    public class EditableColumnSchema
    {
        public string Name { get; set; }
        public int Ordinal { get; set; }
        public int Size { get; set; }
        public Type DataType { get; set; } = typeof(string);
        public bool AllowNull { get; set; }
        public bool IsKey { get; set; }
        public bool IsUnique { get; set; }
        public KeyType KeyType { get; set; } = KeyType.None;
        public string ForeignKeyTable { get; set; }
        public string ForeignKeyField { get; set; }
        public string LastUpdatedBy { get; set; }
        public DateTime LastUpdatedOn { get; set; }
        public List<AuditEntry> AuditHistory { get; set; } = new List<AuditEntry>();
    }

    public class TableSchema
    {
        public string Name { get; set; }
        public List<EditableColumnSchema> ColumnSchemas { get; set; } = new List<EditableColumnSchema>();
        public override string ToString() => $"{Name} (Columns: {ColumnSchemas.Count})";
    }

    // --- In-Memory Data ---
    List<TableSchema> Tables = new List<TableSchema>();

    // --- Persistence Methods ---
    async Task LoadSchemaAsync()
    {
        string filePath = Path.Combine(Env.ContentRootPath, "Data", "schema.json");
        if (File.Exists(filePath))
        {
            var json = await File.ReadAllTextAsync(filePath);
            Tables = JsonSerializer.Deserialize<List<TableSchema>>(json,
                new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<TableSchema>();
        }
        else
        {
            Tables = new List<TableSchema>();
        }
        // Select the first table if available.
        if (Tables.Any())
            SelectedTable = Tables.First();
    }

    async Task SaveSchemaAsync()
    {
        string filePath = Path.Combine(Env.ContentRootPath, "Data", "schema.json");
        var json = JsonSerializer.Serialize(Tables, new JsonSerializerOptions { WriteIndented = true });
        await File.WriteAllTextAsync(filePath, json);
    }

    protected override async Task OnInitializedAsync()
    {
        // Retrieve current user info.
        var user = HttpContextAccessor.HttpContext.User;
        if (user?.Identity?.IsAuthenticated == true)
        {
            currentUserName = user.Identity.Name.Split('\\').Last().ToLower();
            isAdmin = (currentUserName == "tmaynard" || currentUserName == "jdavis");
        }
        await LoadSchemaAsync();
    }

    // Role-based properties.
    bool isAdmin = true;
    string currentUserName = "unknown";

    // --- Tables Grid Handlers ---
    void OnTableRowClick(TableSchema table)
    {
        SelectedTable = table;
    }

    void OnTableCustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var newTable = (TableSchema)e.EditModel;
            newTable.Name = "New Table";
        }
    }

    async Task OnTableEditModelSaving(GridEditModelSavingEventArgs e)
    {
        var table = (TableSchema)e.EditModel;
        if (e.IsNew)
        {
            Tables.Add(table);
        }
        await SaveSchemaAsync();
    }

    async Task OnTableDataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var table = (TableSchema)e.DataItem;
        Tables.Remove(table);
        if (SelectedTable == table)
            SelectedTable = Tables.FirstOrDefault();
        await SaveSchemaAsync();
    }

    // --- Columns Grid Handlers ---
    void OnColumnCustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var newColumn = (EditableColumnSchema)e.EditModel;
            newColumn.KeyType = KeyType.None;
            newColumn.LastUpdatedBy = currentUserName;
            newColumn.LastUpdatedOn = DateTime.Now;
        }
    }

    async Task OnColumnEditModelSaving(GridEditModelSavingEventArgs e)
    {
        var column = (EditableColumnSchema)e.EditModel;
        column.LastUpdatedBy = currentUserName;
        column.LastUpdatedOn = DateTime.Now;
        await SaveSchemaAsync();
    }

    async Task OnColumnDataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var col = (EditableColumnSchema)e.DataItem;
        SelectedTable?.ColumnSchemas.Remove(col);
        await SaveSchemaAsync();
    }

    void ShowAuditPopup(EditableColumnSchema column)
    {
        SelectedAuditColumn = column;
        AuditPopupVisible = true;
    }

    // Global Save Button
    async Task SaveAllChanges()
    {
        await SaveSchemaAsync();
    }
}
