@page "/3"

<div class="grid-container">
    <DxGrid @ref="Grid"
            PageSize="12"
            Data="DataSource"
            KeyFieldName="RowId"
            ValidationEnabled="false"
            ShowFilterRow="true"
            ShowSearchBox="true"
            EditMode="GridEditMode.EditCell"
            EditModelSaving="Grid_EditModelSaving"
            CustomizeElement="Grid_CustomizeElement"
            CustomizeEditModel="Grid_CustomizeEditModel"
            ColumnResizeMode="GridColumnResizeMode.NextColumn"
            TextWrapEnabled="false"
            HighlightRowOnHover="true">
        <ToolbarTemplate>
            <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">
                <DxToolbarItem Text="New" Click="New_Click" IconCssClass="grid-toolbar-new" Enabled="true" />
                <DxToolbarItem Text="Submit" Click="Submit_Click" IconCssClass="grid-toolbar-save" Enabled="BatchItemsEnabled" BeginGroup="true" />
                <DxToolbarItem Text="Revert" Click="Revert_Click" IconCssClass="grid-toolbar-cancel" Enabled="BatchItemsEnabled" />
            </DxToolbar>
        </ToolbarTemplate>
        <Columns>
            <DxGridDataColumn FieldName="TableName" Caption="Table Name" MinWidth="100" />
            <DxGridDataColumn FieldName="ColumnName" Caption="Column Name" MinWidth="100" />
            <DxGridDataColumn FieldName="IsNone" Caption="None" MinWidth="80" />
            <DxGridDataColumn FieldName="IsMasterKey" Caption="Master Key" MinWidth="80" />
            <DxGridDataColumn FieldName="IsPrimaryKey" Caption="Primary Key" MinWidth="80" />
            <DxGridDataColumn FieldName="IsForeignKey" Caption="Foreign Key" MinWidth="80" />
            <DxGridDataColumn FieldName="ForeignKeyTable" Caption="Foreign Key Table" MinWidth="120" />
            <DxGridDataColumn FieldName="ForeignKeyField" Caption="Foreign Key Field" MinWidth="120" />
            <DxGridCommandColumn Width="40px" NewButtonVisible="false">
                <CellDisplayTemplate>
                    <div class="grid-cell-align-center">
                        <DxButton IconCssClass="grid-icon grid-icon-delete"
                                  CssClass="grid-delete-btn"
                                  RenderStyle="ButtonRenderStyle.Link"
                                  aria-label="Delete"
                                  Click="@(() => DeleteDataItem(context.DataItem))" />
                    </div>
                </CellDisplayTemplate>
                <CellEditTemplate>
                    <div class="grid-cell-align-center">
                        <DxButton Enabled="false"
                                  aria-label="Delete"
                                  CssClass="grid-disabled-button"
                                  IconCssClass="grid-icon grid-icon-delete"
                                  RenderStyle="ButtonRenderStyle.Link" />
                    </div>
                </CellEditTemplate>
            </DxGridCommandColumn>
        </Columns>
        <!-- Detail row shows the Audit History of the selected row -->
        <DetailRowTemplate Context="detailContext">
            <DxGrid Data="((ColumnRow)detailContext.DataItem).AuditHistory"
                    PageSize="5"
                    ColumnResizeMode="GridColumnResizeMode.NextColumn"
                    TextWrapEnabled="false">
                <Columns>
                    <DxGridDataColumn FieldName="ChangedOn" Caption="Changed On" DisplayFormat="g" MinWidth="120" />
                    <DxGridDataColumn FieldName="ChangedBy" Caption="Changed By" MinWidth="100" />
                    <DxGridDataColumn FieldName="ChangeDescription" Caption="Description" MinWidth="150" />
                    <DxGridDataColumn FieldName="PreviousValue" Caption="Previous" MinWidth="100" />
                    <DxGridDataColumn FieldName="NewValue" Caption="New" MinWidth="100" />
                </Columns>
            </DxGrid>
        </DetailRowTemplate>
    </DxGrid>
</div>

@code {
    IGrid Grid { get; set; }

    // The main data source: each row represents one column definition.
    IList<ColumnRow> DataSource { get; set; } = new List<ColumnRow>();

    // Track unsaved changes (addition, modifications, deletions).
    Dictionary<ColumnRow, DataChange> UnsavedChanges { get; } = new();
    bool BatchItemsEnabled => UnsavedChanges.Count > 0 || Grid.IsEditing();

    protected override async Task OnInitializedAsync()
    {
        await UpdateDataAsync();
    }

    // Toolbar Actions
    async Task New_Click()
    {
        await Grid.StartEditNewRowAsync();
    }

    async Task Revert_Click()
    {
        await Grid.CancelEditAsync();
        await ClearUnsavedChangesAsync();
    }

    async Task Submit_Click()
    {
        // (For this mock version, simply clear unsaved changes.)
        UnsavedChanges.Clear();
        await Task.CompletedTask;
    }

    // Customize cell appearance to highlight modified cells.
    void Grid_CustomizeElement(GridCustomizeElementEventArgs ea)
    {
        if (ea.ElementType == GridElementType.DataCell)
        {
            var rowData = (ColumnRow)Grid.GetDataItem(ea.VisibleIndex);
            if (rowData != null && UnsavedChanges.TryGetValue(rowData, out var changes))
            {
                var col = (IGridDataColumn)ea.Column;
                // Highlight if new or if this specific field was modified.
                if (changes.Type == DataChangeType.Addition || changes.ChangedFields.Contains(col.FieldName))
                    ea.CssClass = "grid-modified-cell";
            }
        }
    }

    // Setup default values when a new row is created.
    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var newRow = (ColumnRow)e.EditModel;
            newRow.RowId = DataSource.Any() ? DataSource.Max(x => x.RowId) + 1 : 1;
            newRow.TableName = "JOB_HEADER";
            newRow.ColumnName = "NewColumn";
        }
    }

    // Save changes from the edited row.
    void Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var editedRow = (ColumnRow)e.EditModel;
        var originalRow = (ColumnRow)e.DataItem;
        if (e.IsNew)
        {
            DataSource.Add(editedRow);
            UnsavedChanges[editedRow] = new(DataChangeType.Addition, new());
        }
        else
        {
            var changedFields = ApplyModifiedFields(editedRow, originalRow);
            if (changedFields.Count > 0)
            {
                if (UnsavedChanges.TryGetValue(originalRow, out var changes))
                    changes.ChangedFields.UnionWith(changedFields);
                else
                    UnsavedChanges.Add(originalRow, new(DataChangeType.Modification, changedFields));
            }
        }
    }

    // Delete a row.
    void DeleteDataItem(object dataItem)
    {
        var row = (ColumnRow)dataItem;
        UnsavedChanges[row] = new(DataChangeType.Delete, new());
        DataSource.Remove(row);
        Grid.Reload();
    }

    async Task ClearUnsavedChangesAsync()
    {
        UnsavedChanges.Clear();
        await UpdateDataAsync();
    }

    // Mock data matching your sample: each row represents a column definition
    async Task UpdateDataAsync()
    {
        DataSource = new List<ColumnRow> {
            new ColumnRow(1, "JOB_HEADER", "JOB",        false, true,  true,  false, null, null),
            new ColumnRow(2, "JOB_HEADER", "SUFFIX",     false, true,  true,  false, null, null),
            new ColumnRow(3, "JOB_HEADER", "FILLER1",    true,  false, false, false, null, null),
            new ColumnRow(4, "JOB_HEADER", "PART",       false, false, false, true,  "INVENTORY_MSTR", "PART"),
            new ColumnRow(5, "JOB_HEADER", "LOCATION",   false, false, false, true,  "INVENTORY_MSTR", "LOCATION"),
            new ColumnRow(6, "JOB_HEADER", "PRODUCT_LINE",false, false, false, false, null, null),
            new ColumnRow(7, "JOB_HEADER", "ROUTER",     false, false, false, false, null, null),
            new ColumnRow(8, "JOB_HEADER", "PRIORITY",   true,  false, false, false, null, null)
        };

        // (For demonstration, add a couple of audit entries to one row.)
        DataSource[3].AuditHistory.Add(new AuditEntry
            {
                ChangedOn = DateTime.Now.AddMinutes(-15),
                ChangedBy = "admin",
                ChangeDescription = "Key type changed",
                PreviousValue = "None",
                NewValue = "Foreign Key"
            });
        DataSource[3].AuditHistory.Add(new AuditEntry
            {
                ChangedOn = DateTime.Now.AddMinutes(-5),
                ChangedBy = "jdoe",
                ChangeDescription = "Foreign key details updated",
                PreviousValue = "N/A",
                NewValue = "INVENTORY_MSTR / PART"
            });
        await Task.CompletedTask;
    }

    // Compare edited values to original and return the set of changed field names.
    HashSet<string> ApplyModifiedFields(ColumnRow edited, ColumnRow original)
    {
        var changedFields = new HashSet<string>();
        if (edited.TableName != original.TableName)
        {
            original.TableName = edited.TableName;
            changedFields.Add(nameof(ColumnRow.TableName));
        }
        if (edited.ColumnName != original.ColumnName)
        {
            original.ColumnName = edited.ColumnName;
            changedFields.Add(nameof(ColumnRow.ColumnName));
        }
        if (edited.IsNone != original.IsNone)
        {
            original.IsNone = edited.IsNone;
            changedFields.Add(nameof(ColumnRow.IsNone));
        }
        if (edited.IsMasterKey != original.IsMasterKey)
        {
            original.IsMasterKey = edited.IsMasterKey;
            changedFields.Add(nameof(ColumnRow.IsMasterKey));
        }
        if (edited.IsPrimaryKey != original.IsPrimaryKey)
        {
            original.IsPrimaryKey = edited.IsPrimaryKey;
            changedFields.Add(nameof(ColumnRow.IsPrimaryKey));
        }
        if (edited.IsForeignKey != original.IsForeignKey)
        {
            original.IsForeignKey = edited.IsForeignKey;
            changedFields.Add(nameof(ColumnRow.IsForeignKey));
        }
        if (edited.ForeignKeyTable != original.ForeignKeyTable)
        {
            original.ForeignKeyTable = edited.ForeignKeyTable;
            changedFields.Add(nameof(ColumnRow.ForeignKeyTable));
        }
        if (edited.ForeignKeyField != original.ForeignKeyField)
        {
            original.ForeignKeyField = edited.ForeignKeyField;
            changedFields.Add(nameof(ColumnRow.ForeignKeyField));
        }
        return changedFields;
    }

    // Simple change tracking record.
    record DataChange(DataChangeType Type, HashSet<string> ChangedFields);
    enum DataChangeType { Modification, Addition, Delete }

    // Model representing one row in the grid.
    public class ColumnRow
    {
        public int RowId { get; set; }
        public string TableName { get; set; }
        public string ColumnName { get; set; }
        public bool IsNone { get; set; }
        public bool IsMasterKey { get; set; }
        public bool IsPrimaryKey { get; set; }
        public bool IsForeignKey { get; set; }
        public string ForeignKeyTable { get; set; }
        public string ForeignKeyField { get; set; }
        public List<AuditEntry> AuditHistory { get; set; } = new List<AuditEntry>();

        public ColumnRow() { }
        public ColumnRow(int rowId, string tName, string cName, bool none, bool master, bool primary, bool foreign,
                         string fkTable, string fkField)
        {
            RowId = rowId;
            TableName = tName;
            ColumnName = cName;
            IsNone = none;
            IsMasterKey = master;
            IsPrimaryKey = primary;
            IsForeignKey = foreign;
            ForeignKeyTable = fkTable;
            ForeignKeyField = fkField;
        }
    }

    // Model for audit entries.
    public class AuditEntry
    {
        public DateTime ChangedOn { get; set; }
        public string ChangedBy { get; set; }
        public string ChangeDescription { get; set; }
        public string PreviousValue { get; set; }
        public string NewValue { get; set; }
    }
}
