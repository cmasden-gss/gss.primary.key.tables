@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@using PrimaryKeys.Application
@using PrimaryKeys.Application.Models
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject IDbContextFactory<PrimaryKeysContext> DbContextFactory
@inject IHttpContextAccessor HttpContextAccessor
@inject IConfiguration Configuration

<style>
    .highlighted-item > td {
        background-color: var(--bs-danger-border-subtle);
    }
    .highlighted-item > td:first-child {
        background-color: transparent;
    }
    /* Example additional style for confirmed rows */
    .grid-confirmed-row {
        background-color: rgba(0, 128, 0, 0.15) !important;
    }
    /* Style to indicate modified cells */
    .grid-modified-cell {
        border: 2px solid var(--bs-warning) !important;
    }
</style>


<h5 class="mb-4">Schema Manager - @currentUser</h5>

<DxLoadingPanel @bind-Visible="isLoading"
IsContentBlocked="true"
ApplyBackgroundShading="false"
IndicatorAreaVisible="false"
Text="Fetching Data...">
    <DxGrid @ref="Grid"
    PageSize="100"
    PageSizeSelectorVisible="true"
    PageSizeSelectorItems="@(new int[] { 100, 250, 500 })"
    PageSizeSelectorAllRowsItemVisible="true"
    Data="DataSource"
    KeyFieldName="Id"
    ValidationEnabled="false"
    FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
    ShowFilterRow="true"
    ShowSearchBox="true"

    EditMode="GridEditMode.EditCell"
    EditModelSaving="Grid_EditModelSaving"
    CustomizeElement="Grid_CustomizeElement"
    CustomizeEditModel="Grid_CustomizeEditModel"
    ColumnResizeMode="GridColumnResizeMode.NextColumn"
    TextWrapEnabled="false"
    HighlightRowOnHover="true">
        <ToolbarTemplate>
            <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">
                <Items>
                    <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="New" RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="grid-toolbar-new" Click="New_Click"  Enabled="@isAdmin" /> 
                    <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Submit" RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="grid-toolbar-save" Click="Submit_Click"  Enabled="BatchItemsEnabled" BeginGroup="true"  />
                    <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Revert" RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="grid-toolbar-cancel" Click="Revert_Click"  Enabled="BatchItemsEnabled" />
                    <DxToolbarItem Alignment="ToolbarItemAlignment.Right" Text="Removed" RenderStyle="ButtonRenderStyle.Secondary" Click="Removed_Click" Checked="IsRemoved"  BeginGroup="true"/>
                    <DxToolbarItem Alignment="ToolbarItemAlignment.Right" Text="Export" Click="ExportXlsx_Click" BeginGroup="true" />
                    <DxToolbarItem Alignment="ToolbarItemAlignment.Right" Text="Column Chooser" RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="grid-icon-column-chooser" Click="ColumnChooserButton_Click" BeginGroup="true"/>
                </Items>
            </DxToolbar>
        </ToolbarTemplate>
        <Columns>
            <DxGridDataColumn FieldName="TableName" Caption="Table Name" MinWidth="100" ReadOnly="@(!isAdmin)" />
            <DxGridDataColumn FieldName="ColumnName" Caption="Column Name" MinWidth="100" ReadOnly="@(!isAdmin)" />
            <DxGridDataColumn FieldName="IsNone" Caption="None" Width="60" />
            <DxGridDataColumn FieldName="IsMasterKey" Caption="Master Key" Width="80" />
            <DxGridDataColumn FieldName="IsPrimaryKey" Caption="Primary Key" Width="80" />
            <DxGridDataColumn FieldName="IsForeignKey" Caption="Foreign Key" Width="80" />
            <DxGridDataColumn FieldName="IsRemoved" Caption="Removed" Width="80" ReadOnly="@(!isAdmin)" />
            <DxGridDataColumn FieldName="ForeignKeyTable" Caption="Foreign Key Table" Width="160" />
            <DxGridDataColumn FieldName="ForeignKeyField" Caption="Foreign Key Field" Width="160" />
            <DxGridDataColumn FieldName="IsConfirmed" Caption="Confirmed" Width="80" ReadOnly="@(!isAdmin)" />
            @*             <DxGridCommandColumn Width="60px" NewButtonVisible="false" EditButtonVisible="false" SaveButtonVisible="false">
                                <CellDisplayTemplate>
                    <div class="text-center">
                        <button type="button" class="btn btn-link grid-disabled-button" aria-label="Delete" @onclick="@(() => DeleteDataItem(context.DataItem))" readonly="@(!isAdmin)">
                            <i class="bi bi-trash-fill"></i>
                        </button>

                        <button type="button"
                                class="btn grid-button"
                                aria-label="Delete"
                                @onclick="@(() => OpenDeleteModal(context.DataItem))"
                                disabled="@(!isAdmin)">
                            <i class="bi bi-trash-fill"></i>
                        </button>
                    </div>
                </CellDisplayTemplate>
            </DxGridCommandColumn> *@
        </Columns>
        <!-- DetailRowTemplate shows audit history for a given row -->
        <DetailRowTemplate Context="detailContext">
            <DxGrid Data="((ColumnRow)detailContext.DataItem).AuditHistory"
            PageSize="25"
            ColumnResizeMode="GridColumnResizeMode.NextColumn"
            TextWrapEnabled="false">
                <Columns>
                    <DxGridDataColumn FieldName="ChangedOn" Caption="Changed On" DisplayFormat="g" MinWidth="120" />
                    <DxGridDataColumn FieldName="ChangedBy" Caption="Changed By" MinWidth="100" />
                    <DxGridDataColumn FieldName="Description" Caption="Description" MinWidth="150" />
                    <DxGridDataColumn FieldName="PreviousValue" Caption="Previous" MinWidth="100" />
                    <DxGridDataColumn FieldName="NewValue" Caption="New" MinWidth="100" />
                </Columns>
            </DxGrid>
        </DetailRowTemplate>
    </DxGrid>
</DxLoadingPanel>

<!-- Save Confirmation Modal -->
@if (ShowSaveModalFlag)
{
    <div class="modal fade show" style="display:block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Save</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseSaveModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to save all changes?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseSaveModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmSave">Save</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Revert Confirmation Modal -->
@if (ShowRevertModalFlag)
{
    <div class="modal fade show" style="display:block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Revert</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseRevertModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to revert changes and reload data from the database?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseRevertModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmRevert">Revert</button>
                </div>
            </div>
        </div>
    </div>
}

@* @if (ShowDeleteModalFlag)
{
    <div class="modal fade show" style="display:block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the following row?</p>
                    <p><strong>@RowToDelete.TableName - @RowToDelete.ColumnName</strong></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
} *@

@code {
    IGrid Grid { get; set; }

    // Main data source from the database.
    IList<ColumnRow> DataSource { get; set; } = new List<ColumnRow>();

    // Change tracking: key = modified record, value stores a deep copy of its original state.
    Dictionary<ColumnRow, DataChange> UnsavedChanges { get; } = new();
    bool BatchItemsEnabled => UnsavedChanges.Count > 0 || Grid.IsEditing();

    string currentUser { get; set; } //=> "TestUser";  // Replace with your actual user retrieval.

    bool isLoading = false;
    bool isAdmin = false;

    bool IsRemoved { get; set; } = false;

    // Modal flags.
    bool ShowSaveModalFlag { get; set; }
    bool ShowRevertModalFlag { get; set; }

    // bool ShowDeleteModalFlag { get; set; }

    // ColumnRow? RowToDelete { get; set; }

    async Task Removed_Click()
    {
        IsRemoved = !IsRemoved;
        await LoadDataFromDbAsync();
    }

    void ColumnChooserButton_Click() {
        Grid.ShowColumnChooser();
    }

    async Task ExportXlsx_Click()
    {
        await Grid.ExportToXlsxAsync("SchemaManager_Export", new GridXlExportOptions()
            {
                ExportSelectedRowsOnly = false,
            });
    }

    protected override async Task OnInitializedAsync()
    {
        // Retrieve current user info.
        var user = HttpContextAccessor.HttpContext.User;
        if (user?.Identity?.IsAuthenticated == true)
        {
            currentUser = user.Identity.Name.Split('\\').Last().ToLower();

            // Read the admins from appsettings.
            var admins = Configuration.GetSection("IdentityConfiguration:Administrators").Get<string[]>() ?? Array.Empty<string>();
            isAdmin = admins.Any(u => string.Equals(u, currentUser, StringComparison.OrdinalIgnoreCase));

        }

        await LoadDataFromDbAsync();
    }

    // ---------- Modal Handlers ----------
    void OpenSaveModal() => ShowSaveModalFlag = true;
    void CloseSaveModal() => ShowSaveModalFlag = false;

    void OpenRevertModal() => ShowRevertModalFlag = true;
    void CloseRevertModal() => ShowRevertModalFlag = false;

    async Task ConfirmSave()
    {
        // For each modified record, compare the stored original state with the current record
        // and create audit entries for all changes.
        foreach (var kvp in UnsavedChanges.Where(k => k.Value.Type == DataChangeType.Modification))
        {
            var modifiedRecord = kvp.Key;
            var originalState = kvp.Value.OriginalState;  // Deep copy captured earlier.
            // List of properties to audit.
            var propertiesToAudit = new[]
                  {
                nameof(ColumnRow.TableName),
                nameof(ColumnRow.ColumnName),
                nameof(ColumnRow.IsNone),
                nameof(ColumnRow.IsMasterKey),
                nameof(ColumnRow.IsPrimaryKey),
                nameof(ColumnRow.IsForeignKey),
                nameof(ColumnRow.ForeignKeyTable),
                nameof(ColumnRow.ForeignKeyField),
                nameof(ColumnRow.IsRemoved)
            };
            foreach (var propName in propertiesToAudit)
            {
                var prop = typeof(ColumnRow).GetProperty(propName);
                if (prop != null)
                {
                    string oldVal = prop.GetValue(originalState)?.ToString() ?? string.Empty;
                    string newVal = prop.GetValue(modifiedRecord)?.ToString() ?? string.Empty;
                    if (!string.Equals(oldVal, newVal, StringComparison.OrdinalIgnoreCase))
                    {
                        // Create a separate audit entry for this property change.
                        modifiedRecord.AuditHistory.Add(new AuditEntry
                            {
                                ChangedOn = DateTime.Now,
                                ChangedBy = currentUser,
                                Description = $"{propName} changed",
                                ColumnName = modifiedRecord.ColumnName,
                                PreviousValue = oldVal,
                                NewValue = newVal
                            });
                    }
                }
            }
        }

        // Save the changes to the database.
        await SaveDataToDbAsync();
        UnsavedChanges.Clear();
        CloseSaveModal();
    }

    async Task ConfirmRevert()
    {
        await Grid.CancelEditAsync();
        CloseRevertModal();
        UnsavedChanges.Clear();
        await LoadDataFromDbAsync();

    }

    async Task Submit_Click()
    {
        OpenSaveModal();
        await Task.CompletedTask;
    }

    async Task Revert_Click()
    {
        OpenRevertModal();
        await Task.CompletedTask;
    }

    async Task New_Click()
    {
        await Grid.StartEditNewRowAsync();
    }

    void Grid_CustomizeElement(GridCustomizeElementEventArgs ea)
    {
        if (ea.ElementType == GridElementType.DataCell)
        {
            var rowData = (ColumnRow)Grid.GetDataItem(ea.VisibleIndex);
            if (rowData != null && UnsavedChanges.TryGetValue(rowData, out var changes))
            {
                var col = (IGridDataColumn)ea.Column;
                if (changes.Type == DataChangeType.Addition || changes.ChangedFields.Contains(col.FieldName))
                    ea.CssClass = "grid-modified-cell";
            }

            // Apply conditional formatting:
            // If the record is confirmed then highlight the row (and make it read-only).
            if (rowData != null && rowData.IsConfirmed)
            {
                ea.CssClass += " grid-confirmed-row";
            }
        }
    }

    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var newRow = (ColumnRow)e.EditModel;
            newRow.ColumnIndex = DataSource.Any() ? DataSource.Max(x => x.ColumnIndex) + 1 : 1;
            newRow.TableName = "NEW_TABLE_HERE";
            newRow.ColumnName = "NEW_COLUMN_HERE";
        }
    }

    void Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var editedRow = (ColumnRow)e.EditModel;
        var originalRow = (ColumnRow)e.DataItem;

        if (e.IsNew)
        {
            DataSource.Add(editedRow);
            // For new rows, create an audit entry immediately.
            editedRow.AuditHistory.Add(new AuditEntry
                {
                    ChangedOn = DateTime.Now,
                    ChangedBy = currentUser,
                    Description = "New column added",
                    ColumnName = editedRow.ColumnName,
                    PreviousValue = string.Empty,
                    NewValue = editedRow.ColumnName
                });
            UnsavedChanges[editedRow] = new DataChange(DataChangeType.Addition, new HashSet<string>());
        }
        else
        {
            // For modifications, capture the original state (if not already captured).
            if (!UnsavedChanges.ContainsKey(originalRow))
            {
                UnsavedChanges[originalRow] = new DataChange(DataChangeType.Modification, new HashSet<string>())
                    {
                        OriginalState = originalRow.Clone() // Ensure Clone creates a deep copy.
                    };
            }
            // Update the record with the edited values.
            var changedFields = ApplyModifiedFields(editedRow, originalRow);
            if (changedFields.Count > 0)
            {
                UnsavedChanges[originalRow].ChangedFields.UnionWith(changedFields);
            }
        }
    }

    // Instead of calling DeleteDataItem directly, open the delete modal.
    // void OpenDeleteModal(object dataItem)
    // {
    //     RowToDelete = dataItem as ColumnRow;
    //     ShowDeleteModalFlag = true;
    //     StateHasChanged();
    // }

    // void CloseDeleteModal()
    // {
    //     ShowDeleteModalFlag = false;
    //     RowToDelete = null;
    //     StateHasChanged();
    // }

    // // Called from the modal confirmation button.
    // async Task ConfirmDelete()
    // {
    //     if (RowToDelete is not null)
    //     {
    //         // Call your existing delete logic.
    //         DeleteDataItem(RowToDelete);
    //     }
    //     CloseDeleteModal();
    //     await Task.CompletedTask;
    // }


    // void DeleteDataItem(object dataItem)
    // {
    //     // var row = (ColumnRow)dataItem;
    //     // // UnsavedChanges[row] = new DataChange(DataChangeType.Delete, new HashSet<string>());
    //     // // DataSource.Remove(row);

    //     // DataSource.Remove(row);
    //     // Grid.Reload();

    //     var row = (ColumnRow)dataItem;
    //     row.IsRemoved = true;

    //     // Track the modification change if not already tracked.
    //     if (!UnsavedChanges.ContainsKey(row))
    //     {
    //         UnsavedChanges[row] = new DataChange(DataChangeType.Modification, new HashSet<string>());
    //     }
    //     UnsavedChanges[row].ChangedFields.Add(nameof(ColumnRow.IsRemoved));

    //     row.AuditHistory.Add(new AuditEntry
    //         {
    //             ChangedOn = DateTime.Now,
    //             ChangedBy = currentUser,
    //             Description = "Record marked as removed",
    //             ColumnName = row.ColumnName,
    //             PreviousValue = "",
    //             NewValue = ""
    //         });

    //     // // Optionally, remove the row from the grid display.
    //     // DataSource.Remove(row);
    //     // Grid.Reload();
    // }

    // Compare properties and update the original record (used during inline edit).
    HashSet<string> ApplyModifiedFields(ColumnRow edited, ColumnRow original)
    {
        var changedFields = new HashSet<string>();
        if (edited.TableName != original.TableName)
        {
            original.TableName = edited.TableName;
            changedFields.Add(nameof(ColumnRow.TableName));
        }
        if (edited.ColumnName != original.ColumnName)
        {
            original.ColumnName = edited.ColumnName;
            changedFields.Add(nameof(ColumnRow.ColumnName));
        }
        if (edited.IsNone != original.IsNone)
        {
            original.IsNone = edited.IsNone;
            changedFields.Add(nameof(ColumnRow.IsNone));
        }
        if (edited.IsMasterKey != original.IsMasterKey)
        {
            original.IsMasterKey = edited.IsMasterKey;
            changedFields.Add(nameof(ColumnRow.IsMasterKey));
        }
        if (edited.IsPrimaryKey != original.IsPrimaryKey)
        {
            original.IsPrimaryKey = edited.IsPrimaryKey;
            changedFields.Add(nameof(ColumnRow.IsPrimaryKey));
        }
        if (edited.IsRemoved != original.IsRemoved)
        {
            original.IsRemoved = edited.IsRemoved;
            changedFields.Add(nameof(ColumnRow.IsRemoved));
        }
        if (edited.IsConfirmed != original.IsConfirmed)
        {
            original.IsConfirmed = edited.IsConfirmed;
            changedFields.Add(nameof(ColumnRow.IsConfirmed));
        }
        if (edited.IsForeignKey != original.IsForeignKey)
        {
            original.IsForeignKey = edited.IsForeignKey;
            changedFields.Add(nameof(ColumnRow.IsForeignKey));
        }
        if (edited.ForeignKeyTable != original.ForeignKeyTable)
        {
            original.ForeignKeyTable = edited.ForeignKeyTable;
            changedFields.Add(nameof(ColumnRow.ForeignKeyTable));
        }
        if (edited.ForeignKeyField != original.ForeignKeyField)
        {
            original.ForeignKeyField = edited.ForeignKeyField;
            changedFields.Add(nameof(ColumnRow.ForeignKeyField));
        }
        return changedFields;
    }

    record DataChange(DataChangeType Type, HashSet<string> ChangedFields)
    {
        public ColumnRow OriginalState { get; set; }
    }
    enum DataChangeType { Modification, Addition, Delete }

    // ---------- Database Save/Load Methods ----------
    async Task LoadDataFromDbAsync()
    {
        if (isLoading)
        {
            return;
        }

        isLoading = true;
        StateHasChanged();

        DataSource.Clear();
        StateHasChanged();

        using var context = DbContextFactory.CreateDbContext();

        IQueryable<ColumnRow> query = context.ColumnRows;


        if (IsRemoved)
        {
            query = query.Where(x => x.IsRemoved);
        }
        else
        {
            query = query.Where(x => !x.IsRemoved);
        }

        #if DEBUG
        query = query.Include(cr => cr.AuditHistory)
        .OrderBy(x => x.TableName)
        .ThenBy(x => x.ColumnIndex)
       .Take(50);
       #else
               query = query.Include(cr => cr.AuditHistory)
        .OrderBy(x => x.TableName)
        .ThenBy(x => x.ColumnIndex);
       #endif

        var items = await query.ToListAsync();

        // order audit entites
        foreach (var item in items)
        {
            item.AuditHistory = item.AuditHistory
                .OrderBy(a => a.ChangedOn)
                .ToList();
        }

        DataSource = items;

        Console.WriteLine("Loaded schema from the database.");

        isLoading = false;
        StateHasChanged();
    }

    async Task SaveDataToDbAsync()
    {
        if (isLoading)
        {
            return;
        }

        isLoading = true;
        StateHasChanged();


        using var context = DbContextFactory.CreateDbContext();
        foreach (var change in UnsavedChanges)
        {
            var item = change.Key;
            switch (change.Value.Type)
            {
                case DataChangeType.Addition:
                    context.ColumnRows.Add(item);
                    break;
                case DataChangeType.Modification:
                    // Check if the entity exists:
                    var exists = await context.ColumnRows.AnyAsync(e => e.Id == item.Id);
                    if (exists)
                    {
                        if (!context.ColumnRows.Local.Any(e => e.Id == item.Id))
                        {
                            context.ColumnRows.Attach(item);
                        }
                        context.Entry(item).State = EntityState.Modified;

                        foreach (var audit in item.AuditHistory)
                        {
                            var auditExists = await context.AuditEntries.AnyAsync(e => e.Id == audit.Id);
                            if (!auditExists)
                            {
                                context.Entry(audit).State = EntityState.Added;
                            }

                        }
                    }
                    else
                    {
                        // If the entity no longer exists, you can decide to skip it,
                        // warn the user, or treat it as a deletion.
                        Console.WriteLine($"Entity with Id {item.Id} does not exist, skipping update.");
                    }
                    break;
                case DataChangeType.Delete:
                    if (!context.ColumnRows.Local.Any(e => e.Id == item.Id))
                    {
                        context.ColumnRows.Attach(item);
                    }
                    context.ColumnRows.Remove(item);
                    break;
            }
        }

        await context.SaveChangesAsync();
        Console.WriteLine("Schema saved to the database.");



        isLoading = false;
        StateHasChanged();
    }
}
