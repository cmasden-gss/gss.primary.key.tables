@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@using PrimaryKeys.Application
@using PrimaryKeys.Application.Models
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject IDbContextFactory<PrimaryKeysContext> DbContextFactory
@inject IHttpContextAccessor HttpContextAccessor
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime 

<style>
    /* DevExpress and Bootstrap Themes */
    .alt-item > td:not(.dxbl-grid-empty-cell),
    .alt-item > td:not(.dxbl-grid-indent-cell) {
        background-color: color-mix(in srgb, var(--bs-gray-300), transparent 50%);
    }
    /* Fluent Themes */
     .alt-item {
        --dxbl-grid-row-bg: var(--DS-color-surface-neutral-subdued-rest);
    }

    .highlighted-item > td {
    background-color: var(--bs-danger-border-subtle);
    }
    .highlighted-item > td:first-child {
    background-color: transparent;
    }
    /* Example additional style for confirmed rows */
    .grid-confirmed-row {
    background-color: rgba(0, 128, 0, 0.15) !important;
    }

   .grid-unconfirmed-row {
    background-color: rgba(95, 54, 141, 0.15) !important;
    }

    /* Style to indicate modified cells */
    .grid-modified-cell {
    border: 1px dotted var(--bs-warning) !important;
    }
</style>


<h5 class="mb-4">Schema Manager - @CurrentUser</h5>

<DxLoadingPanel @bind-Visible="IsLoading"
IsContentBlocked="true"
ApplyBackgroundShading="false"
IndicatorAreaVisible="false"
Text="Fetching Data...">
    <DxGrid @ref="Grid"
    PageSize="100"
    PageSizeSelectorVisible="true"
    PageSizeSelectorItems="@(new int[] { 100, 250, 500 })"
    PageSizeSelectorAllRowsItemVisible="true"
    Data="DataSource"
    KeyFieldName="Id"
    ValidationEnabled="false"
    FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
    ShowFilterRow="true"
    ShowSearchBox="true"

    EditMode="GridEditMode.EditCell"
    EditModelSaving="Grid_EditModelSaving"
    CustomizeElement="Grid_CustomizeElement"
    CustomizeEditModel="Grid_CustomizeEditModel"
    ColumnResizeMode="GridColumnResizeMode.NextColumn"
    TextWrapEnabled="false"
    HighlightRowOnHover="true">
        <ToolbarTemplate>
            <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">
                <Items>
                    <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="New" RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="grid-toolbar-new" Click="New_Click"  Enabled="@IsAdmin" /> 
                    <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Submit" RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="grid-toolbar-save" Click="Submit_Click"  Enabled="BatchItemsEnabled" BeginGroup="true"  />
                    <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Revert" RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="grid-toolbar-cancel" Click="Revert_Click"  Enabled="BatchItemsEnabled" />
                    <DxToolbarItem Alignment="ToolbarItemAlignment.Right" Text="Removed" RenderStyle="ButtonRenderStyle.Secondary" Click="IsRemovedShown_Click" Checked="IsRemovedShown"  BeginGroup="true"/>
                    <DxToolbarItem Alignment="ToolbarItemAlignment.Right" Text="Export" Click="ExportXlsx_Click" BeginGroup="true" />
                    <DxToolbarItem Alignment="ToolbarItemAlignment.Right" Text="Column Chooser" RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="grid-icon-column-chooser" Click="ColumnChooserButton_Click" BeginGroup="true"/>
                    <DxToolbarItem Alignment="ToolbarItemAlignment.Right" Text="Help" RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="oi oi-info" Click="@(e => JSRuntime.InvokeVoidAsync("open", "https://docs.gss-service.com/en_US/in-house-sdk/schema-manager", "_blank"))" BeginGroup="true" />
                </Items>
            </DxToolbar>
        </ToolbarTemplate>
        <Columns>
            <DxGridDataColumn FieldName="TableName" Caption="Table Name" MinWidth="100" ReadOnly="@(!IsAdmin)" />
            <DxGridDataColumn FieldName="ColumnName" Caption="Column Name" MinWidth="100" ReadOnly="@(!IsAdmin)" />
            <DxGridDataColumn FieldName="IsNone" Caption="None" Width="60" />
            <DxGridDataColumn FieldName="IsMasterKey" Caption="Master Key" Width="80" />
            <DxGridDataColumn FieldName="IsPrimaryKey" Caption="Primary Key" Width="80" />
            <DxGridDataColumn FieldName="IsForeignKey" Caption="Foreign Key" Width="80" />
            <DxGridDataColumn FieldName="ForeignKeyTable" Caption="Foreign Key Table" Width="160" />
            <DxGridDataColumn FieldName="ForeignKeyField" Caption="Foreign Key Field" Width="160" />
            <DxGridDataColumn FieldName="IsConfirmed" Caption="Confirmed" Width="80" ReadOnly="@(!IsAdmin)" />
            <DxGridDataColumn FieldName="IsRemoved" Caption="Removed" Width="80" ReadOnly="@(!IsAdmin)" />

        </Columns>
        <!-- DetailRowTemplate shows audit history for a given row -->
        <DetailRowTemplate Context="detailContext">
            <DxGrid Data="((ColumnRow)detailContext.DataItem).AuditHistory"
            PageSize="25"
            ColumnResizeMode="GridColumnResizeMode.NextColumn"
            TextWrapEnabled="false">
                <Columns>
                    <DxGridDataColumn FieldName="ChangedOn" Caption="Changed On" DisplayFormat="g" MinWidth="120" />
                    <DxGridDataColumn FieldName="ChangedBy" Caption="Changed By" MinWidth="100" />
                    <DxGridDataColumn FieldName="Description" Caption="Description" MinWidth="150" />
                    <DxGridDataColumn FieldName="PreviousValue" Caption="Previous" MinWidth="100" />
                    <DxGridDataColumn FieldName="NewValue" Caption="New" MinWidth="100" />
                </Columns>
            </DxGrid>
        </DetailRowTemplate>
    </DxGrid>
</DxLoadingPanel>

<!-- Save Confirmation Modal -->
@if (ShowSaveModalFlag)
{
    <div class="modal fade show" style="display:block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Save</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseSaveModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to save all changes?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseSaveModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmSave">Save</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Revert Confirmation Modal -->
@if (ShowRevertModalFlag)
{
    <div class="modal fade show" style="display:block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Revert</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseRevertModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to revert changes and reload data from the database?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseRevertModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmRevert">Revert</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    IGrid Grid { get; set; }

    // Main data source from the database.
    IList<ColumnRow> DataSource { get; set; } = new List<ColumnRow>();

    record DataChange(DataChangeType Type, HashSet<string> ChangedFields)
    {
        public ColumnRow OriginalState { get; set; }
    }

    enum DataChangeType { Modification, Addition, Delete }

    // Change tracking: key = modified record, value stores a deep copy of its original state.
    Dictionary<ColumnRow, DataChange> UnsavedChanges { get; } = new();
    bool BatchItemsEnabled => UnsavedChanges.Count > 0 || Grid.IsEditing();

    string CurrentUser { get; set; }

    bool IsLoading = false;
    bool IsAdmin = false;
    bool IsRemovedShown { get; set; } = false;

    // Modal flags.
    bool ShowSaveModalFlag { get; set; }
    bool ShowRevertModalFlag { get; set; }

    // ---------- Modal Handlers ----------
    void OpenSaveModal() => ShowSaveModalFlag = true;
    void CloseSaveModal() => ShowSaveModalFlag = false;

    void OpenRevertModal() => ShowRevertModalFlag = true;
    void CloseRevertModal() => ShowRevertModalFlag = false;

    async Task IsRemovedShown_Click()
    {
        IsRemovedShown = !IsRemovedShown;
        await LoadDataFromDbAsync();
    }

    void ColumnChooserButton_Click() {
        Grid.ShowColumnChooser();
    }

    async Task ExportXlsx_Click()
    {
        await Grid.ExportToXlsxAsync("SchemaManager_Export", new GridXlExportOptions()
            {
                ExportSelectedRowsOnly = false,
            });
    }

    protected override async Task OnInitializedAsync()
    {
        // Retrieve current user info.
        var user = HttpContextAccessor.HttpContext.User;
        if (user?.Identity?.IsAuthenticated == true)
        {
            CurrentUser = user.Identity.Name.Split('\\').Last().ToLower();

            // Read the admins from appsettings.
            var admins = Configuration.GetSection("IdentityConfiguration:Administrators").Get<string[]>() ?? Array.Empty<string>();
            IsAdmin = admins.Any(u => string.Equals(u, CurrentUser, StringComparison.OrdinalIgnoreCase));

        }

        await LoadDataFromDbAsync();
    }

    async Task ConfirmRevert()
    {
        await Grid.CancelEditAsync();
        CloseRevertModal();
        UnsavedChanges.Clear();
        await LoadDataFromDbAsync();

    }

    async Task Submit_Click()
    {
        OpenSaveModal();
        await Task.CompletedTask;
    }

    async Task Revert_Click()
    {
        OpenRevertModal();
        await Task.CompletedTask;
    }

    async Task New_Click()
    {
        await Grid.StartEditNewRowAsync();
    }

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        // Alternate‑row styling
        if (e.ElementType == GridElementType.DataRow && e.VisibleIndex % 2 == 1) {
            e.CssClass = "alt-item";
        }
        // Header styling
        if (e.ElementType == GridElementType.HeaderCell) {
            e.Style    = "background-color: var(--DS-color-surface-neutral-default-selected)";
            e.CssClass = "header-bold";
        }

        // Cell styling & disabling
        if (e.ElementType == GridElementType.DataCell)
        {
            var rowData = (ColumnRow)Grid.GetDataItem(e.VisibleIndex);
            var dataCol = e.Column as IGridDataColumn;

            // Highlight any modified cells
            if (rowData != null && UnsavedChanges.TryGetValue(rowData, out var changes))
            {
                if (changes.Type == DataChangeType.Addition 
                 || changes.ChangedFields.Contains(dataCol.FieldName))
                {
                    e.CssClass += " grid-modified-cell";
                }
            }

                // If the record is confirmed then highlight the row (and make it read-only).
                if (rowData != null && !rowData.IsConfirmed)
                {
                    e.CssClass += " grid-unconfirmed-row";
                }

            // If this row is confirmed, disable everything *except* the IsConfirmed column
            if (rowData != null && rowData.IsConfirmed && dataCol.FieldName != nameof(ColumnRow.IsConfirmed))
            {
                e.Style = "pointer-events: none;";
            }
        }
    }

    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var newRow = (ColumnRow)e.EditModel;
            newRow.ColumnIndex = DataSource.Any() ? DataSource.Max(x => x.ColumnIndex) + 1 : 1;
            newRow.TableName = "NEW_TABLE_HERE";
            newRow.ColumnName = "NEW_COLUMN_HERE";
        }
    }

    void Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var editedRow = (ColumnRow)e.EditModel;
        var originalRow = (ColumnRow)e.DataItem;

        if (e.IsNew)
        {
            DataSource.Add(editedRow);
            // For new rows, create an audit entry immediately.
            editedRow.AuditHistory.Add(new AuditEntry
                {
                    ChangedOn = DateTime.Now,
                    ChangedBy = CurrentUser,
                    Description = "New column",
                    ColumnName = editedRow.ColumnName,
                    PreviousValue = string.Empty,
                    NewValue = editedRow.ColumnName
                });
            UnsavedChanges[editedRow] = new DataChange(DataChangeType.Addition, new HashSet<string>());
        }
        else
        {
            // For modifications, capture the original state (if not already captured).
            if (!UnsavedChanges.ContainsKey(originalRow))
            {
                UnsavedChanges[originalRow] = new DataChange(DataChangeType.Modification, new HashSet<string>())
                    {
                        OriginalState = originalRow.Clone() // Ensure Clone creates a deep copy.
                    };
            }
            // Update the record with the edited values.
            var changedFields = ApplyModifiedFields(editedRow, originalRow);
            if (changedFields.Count > 0)
            {
                UnsavedChanges[originalRow].ChangedFields.UnionWith(changedFields);
            }
        }
    }

    // Shared list of properties to audit/compare
    private static readonly string[] _auditedProperties = new[]
    {
        nameof(ColumnRow.TableName),
        nameof(ColumnRow.ColumnName),
        nameof(ColumnRow.IsNone),
        nameof(ColumnRow.IsMasterKey),
        nameof(ColumnRow.IsPrimaryKey),
        nameof(ColumnRow.IsForeignKey),
        nameof(ColumnRow.ForeignKeyTable),
        nameof(ColumnRow.ForeignKeyField),
        nameof(ColumnRow.IsRemoved),
        nameof(ColumnRow.IsConfirmed)
    };

    /// <summary>
    /// Creates audit entries for any modified fields, then commits changes.
    /// </summary>
    async Task ConfirmSave()
    {
        foreach (var kvp in UnsavedChanges.Where(k => k.Value.Type == DataChangeType.Modification))
        {
            var modified = kvp.Key;
            var original = kvp.Value.OriginalState;

            foreach (var propName in _auditedProperties)
            {
                var prop = typeof(ColumnRow).GetProperty(propName);
                if (prop is null) continue;
                var oldVal = prop.GetValue(original)?.ToString() ?? "";
                var newVal = prop.GetValue(modified)?.ToString() ?? "";
                if (!oldVal.Equals(newVal, StringComparison.OrdinalIgnoreCase))
                {
                    modified.AuditHistory.Add(new AuditEntry
                        {
                            ChangedOn = DateTime.Now,
                            ChangedBy = CurrentUser,
                            Description = propName,
                            ColumnName = modified.ColumnName,
                            PreviousValue = oldVal,
                            NewValue = newVal
                        });
                }
            }

            modified.AuditHistory = modified.AuditHistory
                                         .OrderByDescending(a => a.ChangedOn)
                                         .ToList();
        }

        await SaveDataToDbAsync();
        UnsavedChanges.Clear();
        CloseSaveModal();
    }

    /// <summary>
    /// Compares and applies modified fields from <paramref name="edited"/> to <paramref name="original"/>,
    /// returning the set of names of properties that actually changed.
    /// </summary>
    HashSet<string> ApplyModifiedFields(ColumnRow edited, ColumnRow original)
    {
        var changed = new HashSet<string>();
        foreach (var propName in _auditedProperties)
        {
            var prop = typeof(ColumnRow).GetProperty(propName);
            if (prop is null) continue;
            var oldVal = prop.GetValue(original)?.ToString() ?? "";
            var newVal = prop.GetValue(edited)?.ToString() ?? "";
            if (!oldVal.Equals(newVal, StringComparison.OrdinalIgnoreCase))
            {
                prop.SetValue(original, prop.GetValue(edited));
                changed.Add(propName);
            }
        }
        return changed;
    }


    async Task LoadDataFromDbAsync()
    {
        if (IsLoading)
        {
            return;
        }

        IsLoading = true;
        StateHasChanged();

        DataSource.Clear();
        StateHasChanged();

        using var context = DbContextFactory.CreateDbContext();

        IQueryable<ColumnRow> query = context.ColumnRows;


        if (IsRemovedShown)
        {
            query = query.Where(x => x.IsRemoved);
        }
        else
        {
            query = query.Where(x => !x.IsRemoved);
        }

        #if DEBUG
        query = query.Include(cr => cr.AuditHistory)
        .OrderBy(x => x.TableName)
        .ThenBy(x => x.ColumnIndex)
       .Take(50);
       #else
               query = query.Include(cr => cr.AuditHistory)
        .OrderBy(x => x.TableName)
        .ThenBy(x => x.ColumnIndex);
       #endif

        var items = await query.ToListAsync();

        // order audit entites
        foreach (var item in items)
        {
            item.AuditHistory = item.AuditHistory
                .OrderByDescending(a => a.ChangedOn)
                .ToList();
        }

        DataSource = items;

        Console.WriteLine("Loaded schema from the database.");

        IsLoading = false;
        StateHasChanged();
    }

    async Task SaveDataToDbAsync()
    {
        if (IsLoading)
        {
            return;
        }

        IsLoading = true;
        StateHasChanged();


        using var context = DbContextFactory.CreateDbContext();
        foreach (var change in UnsavedChanges)
        {
            var item = change.Key;
            switch (change.Value.Type)
            {
                case DataChangeType.Addition:
                    context.ColumnRows.Add(item);
                    break;
                case DataChangeType.Modification:
                    // Check if the entity exists:
                    var exists = await context.ColumnRows.AnyAsync(e => e.Id == item.Id);
                    if (exists)
                    {
                        if (!context.ColumnRows.Local.Any(e => e.Id == item.Id))
                        {
                            context.ColumnRows.Attach(item);
                        }
                        context.Entry(item).State = EntityState.Modified;

                        foreach (var audit in item.AuditHistory)
                        {
                            var auditExists = await context.AuditEntries.AnyAsync(e => e.Id == audit.Id);
                            if (!auditExists)
                            {
                                context.Entry(audit).State = EntityState.Added;
                            }

                        }
                    }
                    else
                    {
                        Console.WriteLine($"Entity with Id {item.Id} does not exist, skipping update.");
                    }
                    break;
                case DataChangeType.Delete:
                    if (!context.ColumnRows.Local.Any(e => e.Id == item.Id))
                    {
                        context.ColumnRows.Attach(item);
                    }
                    context.ColumnRows.Remove(item);
                    break;
            }
        }

        await context.SaveChangesAsync();
        Console.WriteLine("Schema saved to the database.");

        IsLoading = false;
        StateHasChanged();
    }
}
