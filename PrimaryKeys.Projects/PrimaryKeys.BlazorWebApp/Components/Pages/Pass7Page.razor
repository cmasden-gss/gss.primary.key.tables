@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@using PrimaryKeys.Application
@using PrimaryKeys.Application.Models
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject IDbContextFactory<PrimaryKeysContext> DbContextFactory
@inject IHttpContextAccessor HttpContextAccessor

<div class="container my-4">
    <h1 class="mb-4">Schema Manager</h1>

    <DxLoadingPanel @bind-Visible="isLoading"
    IsContentBlocked="true"
    ApplyBackgroundShading="false"
    IndicatorAreaVisible="false"
    Text="Fetching Data...">
        <DxGrid @ref="Grid"
        PageSize="100"
        PageSizeSelectorVisible="true"
        PageSizeSelectorItems="@(new int[] { 100, 250, 500 })"
        PageSizeSelectorAllRowsItemVisible="true"
        Data="DataSource"
        KeyFieldName="Id"
        ValidationEnabled="false"
        ShowFilterRow="true"
        ShowSearchBox="true"

        EditMode="GridEditMode.EditCell"
        EditModelSaving="Grid_EditModelSaving"
        CustomizeElement="Grid_CustomizeElement"
        CustomizeEditModel="Grid_CustomizeEditModel"
        ColumnResizeMode="GridColumnResizeMode.NextColumn"
        TextWrapEnabled="false"
        HighlightRowOnHover="true">
            <ToolbarTemplate>
                <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">
                    <DxToolbarItem Text="New" Click="New_Click" IconCssClass="grid-toolbar-new" Enabled="true" />
                    <DxToolbarItem Text="Submit" Click="Submit_Click" IconCssClass="grid-toolbar-save" Enabled="BatchItemsEnabled" BeginGroup="true" />
                    <DxToolbarItem Text="Revert" Click="Revert_Click" IconCssClass="grid-toolbar-cancel" Enabled="BatchItemsEnabled" />
                </DxToolbar>
            </ToolbarTemplate>
            <Columns>
                <DxGridDataColumn FieldName="TableName" Caption="Table Name" MinWidth="100" />
                <DxGridDataColumn FieldName="ColumnName" Caption="Column Name" MinWidth="100" />
                <DxGridDataColumn FieldName="IsNone" Caption="None" Width="80" />
                <DxGridDataColumn FieldName="IsMasterKey" Caption="Master Key" Width="80" />
                <DxGridDataColumn FieldName="IsPrimaryKey" Caption="Primary Key" Width="80" />
                <DxGridDataColumn FieldName="IsForeignKey" Caption="Foreign Key" Width="80" />
                <DxGridDataColumn FieldName="ForeignKeyTable" Caption="Foreign Key Table" MinWidth="120" />
                <DxGridDataColumn FieldName="ForeignKeyField" Caption="Foreign Key Field" MinWidth="120" />
                <DxGridCommandColumn Width="60px" NewButtonVisible="false">
                    <CellDisplayTemplate>
                        <div class="text-center">
                            <button type="button" class="btn btn-link grid-disabled-button" aria-label="Delete" @onclick="@(() => DeleteDataItem(context.DataItem))">
                                <i class="bi bi-trash-fill"></i>
                            </button>
                        </div>
                    </CellDisplayTemplate>
                    <CellEditTemplate>
                        <div class="text-center">
                            <DxButton Enabled="false"
                            aria-label="Delete"
                            CssClass="grid-disabled-button"
                            IconCssClass="grid-icon grid-icon-delete"
                            RenderStyle="ButtonRenderStyle.Link" />
                        </div>
                    </CellEditTemplate>
                </DxGridCommandColumn>
            </Columns>
            <!-- DetailRowTemplate shows audit history for a given row -->
            <DetailRowTemplate Context="detailContext">
                <DxGrid Data="((ColumnRow)detailContext.DataItem).AuditHistory"
                PageSize="5"
                ColumnResizeMode="GridColumnResizeMode.NextColumn"
                TextWrapEnabled="false">
                    <Columns>
                        <DxGridDataColumn FieldName="ChangedOn" Caption="Changed On" DisplayFormat="g" MinWidth="120" />
                        <DxGridDataColumn FieldName="ChangedBy" Caption="Changed By" MinWidth="100" />
                        <DxGridDataColumn FieldName="Description" Caption="Description" MinWidth="150" />
                        <DxGridDataColumn FieldName="PreviousValue" Caption="Previous" MinWidth="100" />
                        <DxGridDataColumn FieldName="NewValue" Caption="New" MinWidth="100" />
                    </Columns>
                </DxGrid>
            </DetailRowTemplate>
        </DxGrid>
    </DxLoadingPanel>
</div>

<!-- Save Confirmation Modal -->
@if (ShowSaveModalFlag)
{
    <div class="modal fade show" style="display:block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Save</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseSaveModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to save all changes?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseSaveModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmSave">Save</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Revert Confirmation Modal -->
@if (ShowRevertModalFlag)
{
    <div class="modal fade show" style="display:block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Revert</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseRevertModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to revert changes and reload data from the database?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseRevertModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmRevert">Revert</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    IGrid Grid { get; set; }

    // Main data source from the database.
    IList<ColumnRow> DataSource { get; set; } = new List<ColumnRow>();

    // Change tracking: key = modified record, value stores a deep copy of its original state.
    Dictionary<ColumnRow, DataChange> UnsavedChanges { get; } = new();
    bool BatchItemsEnabled => UnsavedChanges.Count > 0 || Grid.IsEditing();

    string currentUser { get; set; } //=> "TestUser";  // Replace with your actual user retrieval.

    bool isLoading = false;
    bool isAdmin = false;

    // Modal flags.
    bool ShowSaveModalFlag { get; set; }
    bool ShowRevertModalFlag { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Retrieve current user info.
        var user = HttpContextAccessor.HttpContext.User;
        if (user?.Identity?.IsAuthenticated == true)
        {
            currentUser = user.Identity.Name.Split('\\').Last().ToLower();
            isAdmin = (currentUser == "tmaynard" || currentUser == "jdavis");
        }

        await LoadDataFromDbAsync();
    }

    // ---------- Modal Handlers ----------
    void OpenSaveModal() => ShowSaveModalFlag = true;
    void CloseSaveModal() => ShowSaveModalFlag = false;

    void OpenRevertModal() => ShowRevertModalFlag = true;
    void CloseRevertModal() => ShowRevertModalFlag = false;

    async Task ConfirmSave()
    {
        // For each modified record, compare the stored original state with the current record
        // and create audit entries for all changes.
        foreach (var kvp in UnsavedChanges.Where(k => k.Value.Type == DataChangeType.Modification))
        {
            var modifiedRecord = kvp.Key;
            var originalState = kvp.Value.OriginalState;  // Deep copy captured earlier.
            // List of properties to audit.
            var propertiesToAudit = new[]
                  {
                nameof(ColumnRow.TableName),
                nameof(ColumnRow.ColumnName),
                nameof(ColumnRow.IsNone),
                nameof(ColumnRow.IsMasterKey),
                nameof(ColumnRow.IsPrimaryKey),
                nameof(ColumnRow.IsForeignKey),
                nameof(ColumnRow.ForeignKeyTable),
                nameof(ColumnRow.ForeignKeyField)
            };
            foreach (var propName in propertiesToAudit)
            {
                var prop = typeof(ColumnRow).GetProperty(propName);
                if (prop != null)
                {
                    string oldVal = prop.GetValue(originalState)?.ToString() ?? string.Empty;
                    string newVal = prop.GetValue(modifiedRecord)?.ToString() ?? string.Empty;
                    if (!string.Equals(oldVal, newVal, StringComparison.OrdinalIgnoreCase))
                    {
                        // Create a separate audit entry for this property change.
                        modifiedRecord.AuditHistory.Add(new AuditEntry
                            {
                                ChangedOn = DateTime.Now,
                                ChangedBy = currentUser,
                                Description = $"{propName} changed",
                                ColumnName = modifiedRecord.ColumnName,
                                PreviousValue = oldVal,
                                NewValue = newVal
                            });
                    }
                }
            }
        }

        // Save the changes to the database.
        await SaveDataToDbAsync();
        UnsavedChanges.Clear();
        CloseSaveModal();
    }

    async Task ConfirmRevert()
    {
        // await Grid.CancelEditAsync();
        CloseRevertModal();
        UnsavedChanges.Clear();
        await LoadDataFromDbAsync();

    }

    async Task Submit_Click()
    {
        OpenSaveModal();
        await Task.CompletedTask;
    }

    async Task Revert_Click()
    {
        OpenRevertModal();
        await Task.CompletedTask;
    }

    async Task New_Click()
    {
        await Grid.StartEditNewRowAsync();
    }

    // ---------- Grid Event Handlers ----------
    void Grid_CustomizeElement(GridCustomizeElementEventArgs ea)
    {
        if (ea.ElementType == GridElementType.DataCell)
        {
            var rowData = (ColumnRow)Grid.GetDataItem(ea.VisibleIndex);
            if (rowData != null && UnsavedChanges.TryGetValue(rowData, out var changes))
            {
                var col = (IGridDataColumn)ea.Column;
                if (changes.Type == DataChangeType.Addition || changes.ChangedFields.Contains(col.FieldName))
                    ea.CssClass = "grid-modified-cell";
            }
        }
    }

    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var newRow = (ColumnRow)e.EditModel;
            newRow.ColumnIndex = DataSource.Any() ? DataSource.Max(x => x.ColumnIndex) + 1 : 1;
            newRow.TableName = "NEW_TABLE_HERE";
            newRow.ColumnName = "NEW_COLUMN_HERE";
        }
    }

    void Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var editedRow = (ColumnRow)e.EditModel;
        var originalRow = (ColumnRow)e.DataItem;

        if (e.IsNew)
        {
            DataSource.Add(editedRow);
            // For new rows, create an audit entry immediately.
            editedRow.AuditHistory.Add(new AuditEntry
                {
                    ChangedOn = DateTime.Now,
                    ChangedBy = currentUser,
                    Description = "New column added",
                    ColumnName = editedRow.ColumnName,
                    PreviousValue = string.Empty,
                    NewValue = editedRow.ColumnName
                });
            UnsavedChanges[editedRow] = new DataChange(DataChangeType.Addition, new HashSet<string>());
        }
        else
        {
            // For modifications, capture the original state (if not already captured).
            if (!UnsavedChanges.ContainsKey(originalRow))
            {
                UnsavedChanges[originalRow] = new DataChange(DataChangeType.Modification, new HashSet<string>())
                    {
                        OriginalState = originalRow.Clone() // Ensure Clone creates a deep copy.
                    };
            }
            // Update the record with the edited values.
            var changedFields = ApplyModifiedFields(editedRow, originalRow);
            if (changedFields.Count > 0)
            {
                UnsavedChanges[originalRow].ChangedFields.UnionWith(changedFields);
            }
        }
    }

    void DeleteDataItem(object dataItem)
    {
        var row = (ColumnRow)dataItem;
        UnsavedChanges[row] = new DataChange(DataChangeType.Delete, new HashSet<string>());
        DataSource.Remove(row);
        Grid.Reload();
    }

    // Compare properties and update the original record (used during inline edit).
    HashSet<string> ApplyModifiedFields(ColumnRow edited, ColumnRow original)
    {
        var changedFields = new HashSet<string>();
        if (edited.TableName != original.TableName)
        {
            original.TableName = edited.TableName;
            changedFields.Add(nameof(ColumnRow.TableName));
        }
        if (edited.ColumnName != original.ColumnName)
        {
            original.ColumnName = edited.ColumnName;
            changedFields.Add(nameof(ColumnRow.ColumnName));
        }
        if (edited.IsNone != original.IsNone)
        {
            original.IsNone = edited.IsNone;
            changedFields.Add(nameof(ColumnRow.IsNone));
        }
        if (edited.IsMasterKey != original.IsMasterKey)
        {
            original.IsMasterKey = edited.IsMasterKey;
            changedFields.Add(nameof(ColumnRow.IsMasterKey));
        }
        if (edited.IsPrimaryKey != original.IsPrimaryKey)
        {
            original.IsPrimaryKey = edited.IsPrimaryKey;
            changedFields.Add(nameof(ColumnRow.IsPrimaryKey));
        }
        if (edited.IsForeignKey != original.IsForeignKey)
        {
            original.IsForeignKey = edited.IsForeignKey;
            changedFields.Add(nameof(ColumnRow.IsForeignKey));
        }
        if (edited.ForeignKeyTable != original.ForeignKeyTable)
        {
            original.ForeignKeyTable = edited.ForeignKeyTable;
            changedFields.Add(nameof(ColumnRow.ForeignKeyTable));
        }
        if (edited.ForeignKeyField != original.ForeignKeyField)
        {
            original.ForeignKeyField = edited.ForeignKeyField;
            changedFields.Add(nameof(ColumnRow.ForeignKeyField));
        }
        return changedFields;
    }

    record DataChange(DataChangeType Type, HashSet<string> ChangedFields)
    {
        public ColumnRow OriginalState { get; set; }
    }
    enum DataChangeType { Modification, Addition, Delete }

    // ---------- Database Save/Load Methods ----------
    async Task LoadDataFromDbAsync()
    {
        if (isLoading)
        {
            return;
        }

        isLoading = true;
        StateHasChanged();

        // DBContext.ChangeTracker.Clear();
        DataSource.Clear();
        StateHasChanged();

        using var context = DbContextFactory.CreateDbContext();
        DataSource = await context.ColumnRows
            .Include(cr => cr.AuditHistory)
            .OrderBy(x => x.TableName)
            .ThenBy(x => x.ColumnIndex)
            .Take(50)
            .ToListAsync();
        Console.WriteLine("Loaded schema from the database.");

        isLoading = false;
        StateHasChanged();
    }

    async Task SaveDataToDbAsync()
    {
        if (isLoading)
        {
            return;
        }

        isLoading = true;
        StateHasChanged();


        using var context = DbContextFactory.CreateDbContext();
        foreach (var change in UnsavedChanges)
        {
            var item = change.Key;
            switch (change.Value.Type)
            {
                case DataChangeType.Addition:
                    context.ColumnRows.Add(item);
                    break;
                case DataChangeType.Modification:
                    // Check if the entity exists:
                    var exists = await context.ColumnRows.AnyAsync(e => e.Id == item.Id);
                    if (exists)
                    {
                        if (!context.ColumnRows.Local.Any(e => e.Id == item.Id))
                        {
                            context.ColumnRows.Attach(item);
                        }
                        context.Entry(item).State = EntityState.Modified;
                    }
                    else
                    {
                        // If the entity no longer exists, you can decide to skip it,
                        // warn the user, or treat it as a deletion.
                        Console.WriteLine($"Entity with Id {item.Id} does not exist, skipping update.");
                    }
                    break;
                case DataChangeType.Delete:
                    if (!context.ColumnRows.Local.Any(e => e.Id == item.Id))
                    {
                        context.ColumnRows.Attach(item);
                    }
                    context.ColumnRows.Remove(item);
                    break;
            }
        }

        await context.SaveChangesAsync();
        Console.WriteLine("Schema saved to the database.");



        isLoading = false;
        StateHasChanged();
    }
}
